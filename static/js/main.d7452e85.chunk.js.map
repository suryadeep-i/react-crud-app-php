{"version":3,"sources":["Context.js","components/Form.js","components/UserList.js","Actions.js","App.js","index.js"],"names":["AppContext","React","createContext","Provider","Form","insertUser","useContext","_useState","useState","_useState2","Object","slicedToArray","newUser","setNewUser","addNewUser","e","field","objectSpread","defineProperty","target","value","react_default","a","createElement","className","onSubmit","preventDefault","reset","htmlFor","type","id","onChange","placeholder","autoComplete","required","UserList","_useContext","users","userLength","editMode","cancelEdit","updateUser","deleteUser","newData","setNewData","updateNewData","map","_ref","user_name","user_email","user_phone","user_message","isEditing","key","defaultValue","onClick","enableEdit","window","confirm","deleteConfirm","Actions","setUsers","_useState3","_useState4","setUserLength","useEffect","fetch","then","res","json","data","success","reverse","catch","err","console","log","user","userData","method","headers","Content-Type","body","JSON","stringify","alert","msg","concat","toConsumableArray","theID","userDeleted","filter","length","App","components_Form","components_UserList","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d7452e85.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const AppContext = React.createContext();\r\nexport const Provider = AppContext.Provider;","import { useState, useContext } from \"react\";\r\nimport React from 'react';\r\nimport { AppContext } from \"../Context\";\r\nconst Form = () => {\r\n    const { insertUser } = useContext(AppContext);\r\n    const [newUser, setNewUser] = useState({});\r\n\r\n    // Storing the Insert User Form Data.\r\n    const addNewUser = (e, field) => {\r\n        setNewUser({\r\n            ...newUser,\r\n            [field]: e.target.value,\r\n        });\r\n    };\r\n\r\n    // Inserting a new user into the Database.\r\n    const submitUser = (e) => {\r\n        e.preventDefault();\r\n        insertUser(newUser);\r\n        e.target.reset();\r\n    };\r\n\r\n    return (\r\n        <form className=\"insertForm\" onSubmit={submitUser}>\r\n            <h2>Insert User</h2>\r\n            <label htmlFor=\"_name\">Name</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"_name\"\r\n                onChange={(e) => addNewUser(e, \"user_name\")}\r\n                placeholder=\"Enter name\"\r\n                autoComplete=\"off\"\r\n                required\r\n            />\r\n            <label htmlFor=\"_email\">Email</label>\r\n            <input\r\n                type=\"email\"\r\n                id=\"_email\"\r\n                onChange={(e) => addNewUser(e, \"user_email\")}\r\n                placeholder=\"Enter email\"\r\n                autoComplete=\"off\"\r\n                required\r\n            />\r\n            <label htmlFor=\"_phone\">Phone</label>\r\n            <input\r\n                type=\"phone\"\r\n                id=\"_phone\"\r\n                onChange={(e) => addNewUser(e, \"user_phone\")}\r\n                placeholder=\"Enter phone\"\r\n                autoComplete=\"off\"\r\n                required\r\n            />\r\n            <label htmlFor=\"_message\">Message</label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"_message\"\r\n                onChange={(e) => addNewUser(e, \"user_message\")}\r\n                placeholder=\"Enter message\"\r\n                autoComplete=\"off\"\r\n                required\r\n            />\r\n            <input type=\"submit\" value=\"Insert\" />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import { useContext, useState } from \"react\";\r\nimport React from 'react';\r\nimport { AppContext } from \"../Context\";\r\n\r\nconst UserList = () => {\r\n    const {\r\n        users,\r\n        userLength,\r\n        editMode,\r\n        cancelEdit,\r\n        updateUser,\r\n        deleteUser,\r\n    } = useContext(AppContext);\r\n\r\n    // Storing users new data when they editing their info.\r\n    const [newData, setNewData] = useState({});\r\n\r\n    const saveBtn = () => {\r\n        updateUser(newData);\r\n    };\r\n\r\n    const updateNewData = (e, field) => {\r\n        setNewData({\r\n            ...newData,\r\n            [field]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const enableEdit = (id, user_name, user_email, user_phone, user_message) => {\r\n        setNewData({ id, user_name, user_email, user_phone, user_message });\r\n        editMode(id);\r\n    };\r\n\r\n    const deleteConfirm = (id) => {\r\n        if (window.confirm(\"Are you sure?\")) {\r\n            deleteUser(id);\r\n        }\r\n    };\r\n\r\n    return !userLength ? (\r\n        <p>{userLength === null ? \"Loading...\" : \"Please insert some users.\"}</p>\r\n    ) : (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Phone</th>\r\n                    <th>Message</th>\r\n                    <th>Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {users.map(({ id, user_name, user_email, user_phone, user_message, isEditing }) => {\r\n                    return isEditing === true ? (\r\n                        <tr key={id}>\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    defaultValue={user_name}\r\n                                    onChange={(e) => updateNewData(e, \"user_name\")}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"email\"\r\n                                    defaultValue={user_email}\r\n                                    onChange={(e) => updateNewData(e, \"user_email\")}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"phone\"\r\n                                    defaultValue={user_phone}\r\n                                    onChange={(e) => updateNewData(e, \"user_phone\")}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    defaultValue={user_message}\r\n                                    onChange={(e) => updateNewData(e, \"user_message\")}\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <button className=\"btn green-btn\" onClick={() => saveBtn()}>\r\n                                    Save\r\n                                </button>\r\n                                <button\r\n                                    className=\"btn default-btn\"\r\n                                    onClick={() => cancelEdit(id)}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    ) : (\r\n                        <tr key={id}>\r\n                            <td>{user_name}</td>\r\n                            <td>{user_email}</td>\r\n                            <td>{user_phone}</td>\r\n                            <td>{user_message}</td>\r\n                            <td>\r\n                                <button\r\n                                    className=\"btn default-btn\"\r\n                                    onClick={() => enableEdit(id, user_name, user_email, user_phone, user_message)}\r\n                                >\r\n                                    Edit\r\n                                </button>\r\n                                <button\r\n                                    className=\"btn red-btn\"\r\n                                    onClick={() => deleteConfirm(id)}\r\n                                >\r\n                                    Delete\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default UserList;","import { useEffect, useState } from \"react\";\r\nimport React from 'react';\r\n\r\nexport const Actions = () => {\r\n    let [users, setUsers] = useState([]);\r\n\r\n    //userLength is for showing the Data Loading message.\r\n    let [userLength, setUserLength] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://localhost:8888/php-react/all-users.php\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setUsers(data.users.reverse());\r\n                    setUserLength(true);\r\n                } else {\r\n                    setUserLength(0);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, []);\r\n\r\n    // Inserting a new user into the database.\r\n    const insertUser = (newUser) => {\r\n        fetch(\"http://localhost:8888/php-react/add-user.php\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(newUser),\r\n        })\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                if (data.id) {\r\n                    setUsers([\r\n                        {\r\n                            id: data.id,\r\n                            ...newUser,\r\n                        },\r\n                        ...users,\r\n                    ]);\r\n                    setUserLength(true);\r\n                } else {\r\n                    alert(data.msg);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    // Enabling the edit mode for a listed user.\r\n    const editMode = (id) => {\r\n        users = users.map((user) => {\r\n            if (user.id === id) {\r\n                user.isEditing = true;\r\n                return user;\r\n            }\r\n            user.isEditing = false;\r\n            return user;\r\n        });\r\n        setUsers(users);\r\n    };\r\n\r\n    // Cance the edit mode.\r\n    const cancelEdit = (id) => {\r\n        users = users.map((user) => {\r\n            if (user.id === id) {\r\n                user.isEditing = false;\r\n                return user;\r\n            }\r\n            return user;\r\n        });\r\n        setUsers(users);\r\n    };\r\n\r\n    // Updating a user.\r\n    const updateUser = (userData) => {\r\n        fetch(\"http://localhost:8888/php-react/update-user.php\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(userData),\r\n        })\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    users = users.map((user) => {\r\n                        if (user.id === userData.id) {\r\n                            user.isEditing = false;\r\n                            user.user_name = userData.user_name;\r\n                            user.user_email = userData.user_email;\r\n                            return user;\r\n                        }\r\n                        return user;\r\n                    });\r\n                    setUsers(users);\r\n                } else {\r\n                    alert(data.msg);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    // Deleting a user.\r\n    const deleteUser = (theID) => {\r\n        // filter outing the user.\r\n        let userDeleted = users.filter((user) => {\r\n            return user.id !== theID;\r\n        });\r\n        fetch(\"http://localhost:8888/php-react/delete-user.php\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ id: theID }),\r\n        })\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setUsers(userDeleted);\r\n                    if (users.length === 1) {\r\n                        setUserLength(0);\r\n                    }\r\n                } else {\r\n                    alert(data.msg);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    return {\r\n        users,\r\n        editMode,\r\n        cancelEdit,\r\n        updateUser,\r\n        insertUser,\r\n        deleteUser,\r\n        userLength,\r\n    };\r\n};","import { Provider } from \"./Context\";\nimport Form from \"./components/Form\";\nimport UserList from \"./components/UserList\";\nimport { Actions } from \"./Actions\";\nimport React from 'react';\nfunction App() {\n  const data = Actions();\n  return (\n    <Provider value={data}>\n      <div className=\"App\">\n        <h1>React JS + PHP CRUD Application</h1>\n        <div className=\"wrapper\">\n          <section className=\"left-side\">\n            <Form />\n          </section>\n          <section className=\"right-side\">\n            <UserList />\n          </section>\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}